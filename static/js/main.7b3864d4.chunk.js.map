{"version":3,"sources":["logo.svg","AppHeader.js","NewItemView.js","ListItem.js","ListView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","src","logo","alt","to","NewItemView","props","name","url","lead","id","edit","item","docsURL","className","htmlFor","type","required","defaultValue","onChange","handleInputChange","data-id","onClick","handleAddorEditFramework","ListItem","editPath","href","target","handleDeleteFramework","path","ListView","ListItems","list","map","key","App","state","inputValue","clearInput","setState","value","newValue","newList","filter","frame","window","confirm","ev","getAttribute","input","alert","document","getElementById","focus","preventDefault","Date","now","localStorage","getItem","this","JSON","parse","setItem","stringify","basename","React","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b3864d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './AppHeader.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nfunction Header(){\r\n    return (\r\n        <header>\r\n            <img src={logo} alt=\"logo\"/>\r\n            <p>JavaScript Frameworks</p>\r\n            <Link to=\"/addNew\">+ New Item</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './NewItemView.css'\r\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom'\r\n\r\n\r\nfunction NewItemView(props){\r\n\r\n    let name = \"\"\r\n    let url = \"\"\r\n    let lead = \"\"\r\n    let id = 0\r\n\r\n    if(props.edit){\r\n        name = props.item.name\r\n        url = props.item.docsURL\r\n        lead = props.item.lead\r\n        id = props.item.id\r\n    } \r\n\r\n    return <div className=\"addNew\" id=\"formPage\">\r\n        <div className=\"inputs\">\r\n            <div>\r\n                <label htmlFor=\"name\">Framework Name</label>\r\n                <input id=\"name\" className=\"nameInput\" type=\"text\" required=\"required\" defaultValue={name} onChange={props.handleInputChange}/>\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"docsURL\">Docs URL</label>\r\n                <input id=\"docsURL\" className=\"urlInput\" type=\"text\" required=\"required\" defaultValue={url} onChange={props.handleInputChange}/>\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"lead\">Lead by</label>\r\n                <input id=\"lead\" className=\"leadInput\" type=\"text\" required=\"required\" defaultValue={lead} onChange={props.handleInputChange}/>\r\n            </div>\r\n        </div>\r\n        <div className=\"actions\">\r\n            <Link id=\"saveButton\" className=\"save green\" to=\"/\" data-id={id} onClick={props.handleAddorEditFramework}>SAVE</Link>\r\n            <Link className=\"cancel cancel\" to=\"/\">CANCEL</Link>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default NewItemView;\r\n","import React from 'react';\r\nimport './ListItem.css'\r\nimport EditItem from './NewItemView'\r\n\r\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom'\r\n\r\n\r\nfunction ListItem(props){\r\n    const editPath = `/${props.item.id}/edit`\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"item\">\r\n                <div className=\"itemInfo\">\r\n                    <p>{props.item.name}</p>\r\n                    <div>\r\n                        <p>lead by {props.item.lead}</p>\r\n                        <a href={props.item.docsURL} target=\"_black\">Official Docs</a>\r\n                    </div>\r\n                </div>\r\n                <div className=\"actions\">\r\n                    <Link className=\"edit green\" to={editPath}>EDIT</Link>\r\n                    <Link className=\"delete red\" data-id={props.item.id} to=\"/\" onClick={()=>{props.handleDeleteFramework(props.item.id)}}>DELETE</Link>\r\n                </div>\r\n            </div>\r\n            <Route path={editPath}>\r\n                <EditItem item={props.item} handleInputChange={props.handleInputChange} edit={true} handleAddorEditFramework={props.handleAddorEditFramework}/>\r\n            </Route>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem;\r\n","import React from 'react';\r\nimport ListItem from './ListItem';\r\nimport './ListView.css'\r\n\r\nfunction ListView(props){\r\n    const ListItems = props.list.map(item => <ListItem key={item.id} item={item} handleDeleteFramework={props.handleDeleteFramework} handleInputChange={props.handleInputChange} handleAddorEditFramework={props.handleAddorEditFramework}/>)\r\n\r\n    return <div  className=\"list\">\r\n        {ListItems}\r\n    </div>\r\n}\r\n\r\nexport default ListView;\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport AppHeader from './AppHeader'\nimport ListView from './ListView'\nimport NewItemView from './NewItemView'\n\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom'\n\nclass App extends React.Component{\n\n  state = {\n    list: [{\n        id:1,\n        name: 'Vue',\n        lead: 'Even You',\n        docsURL: 'https://vuejs.org/'\n      },{\n        id:2,\n        name: 'Vue',\n        lead: 'Even You',\n        docsURL: 'https://vuejs.org/'\n      }\n    ],\n    inputValue: {}\n  }\n\n  clearInput = () => {\n    this.setState({inputValue:{}})\n  }\n\n  handleInputChange = ({target: {id, value}}) => {\n    const newValue = {...this.state.inputValue, [id]: value}\n    this.setState({inputValue: newValue})\n  }\n\n  handleDeleteFramework = (id) =>{\n    const newList = this.state.list.filter((frame) => {\n      if(frame.id == id ){\n        if(window.confirm(`Do you want to delet ${frame.name}?`)){\n          return false\n        }\n      } \n        return true\n    })\n    this.setState({list: newList})\n    this.clearInput()\n  }\n\n  handleAddorEditFramework = (ev) => {\n\n    const id = ev.target.getAttribute('data-id')\n    const input = this.state.inputValue\n\n    if(id != 0){\n\n      for(let key in input){\n        if(!input[key]){\n          alert(`${key} can not be empty!`)\n          document.getElementById(key).focus()\n          ev.preventDefault()\n          return\n        }\n      }\n\n      const newList = this.state.list.map((frame)=> {\n        if (frame.id == id){\n          const edited = {...frame, id: id, ...this.state.inputValue}\n          return edited\n        } else {\n          return frame\n        }\n      })\n\n      this.setState({list: newList})\n    } else {\n\n      if(!input.name){\n        alert(`name can not be empty!`)\n        document.getElementById('name').focus()\n        ev.preventDefault()\n        return\n      } else if(!input.docsURL){\n        alert(`docsURL can not be empty!`)\n        document.getElementById('docsURL').focus()\n        ev.preventDefault()\n        return\n      }else if(!input.lead){\n        alert(`lead can not be empty!`)\n        document.getElementById('lead').focus()\n        ev.preventDefault()\n        return\n      }\n\n      const newFramework = {id:Date.now(),...this.state.inputValue}\n      const newList = [newFramework,...this.state.list]\n      this.setState({list: newList})\n    }\n\n    this.clearInput()\n  }\n\n  componentDidMount(){\n    if(localStorage.getItem('frameworkList')){\n      this.setState({list: JSON.parse(localStorage.getItem('frameworkList'))})\n    }\n  }\n\n  componentDidUpdate(){\n    localStorage.setItem('frameworkList',JSON.stringify(this.state.list))\n  }\n\n\n  render(){\n    return (\n      <Router basename=\"/mad9135-p1-react-crud-list\" >\n        <div className=\"App\">\n          <AppHeader/>\n          <Switch>\n            <Route path=\"/addNew\">\n              <p className=\"addTitle\">Add a New Framework</p>\n              <NewItemView handleInputChange={this.handleInputChange} handleAddorEditFramework={this.handleAddorEditFramework}/>\n            </Route>\n            <Route path=\"/\">\n              <ListView list={this.state.list} handleDeleteFramework={this.handleDeleteFramework} handleInputChange={this.handleInputChange} handleAddorEditFramework={this.handleAddorEditFramework}/>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}